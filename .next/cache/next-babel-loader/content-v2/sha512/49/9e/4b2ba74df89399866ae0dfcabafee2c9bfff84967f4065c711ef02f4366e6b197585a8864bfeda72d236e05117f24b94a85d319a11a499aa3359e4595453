{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jameshudson/code/udemy/react/section-23-nextjs-meetups-project/pages/[meetupId]/index.jsx\";\n// import Head from 'next/head'\n// import { MongoClient, ObjectId } from 'mongodb'\n// import MeetupDetail from \"../../components/meetups/MeetupDetail\"\n// const MeetupDetailsPage = (props) => {\n//   return (\n//     <>\n//       <Head>\n//         <title>{props.meetupData.title}</title>\n//         <meta name='description' content={props.meetupData.description}/>\n//       </Head>\n//       <MeetupDetail \n//         image={props.meetupData.image}\n//         title={props.meetupData.title}\n//         address={props.meetupData.address}\n//         description={props.meetupData.description}\n//       />\n//     </>\n//   )\n// }\n// // because this a dynamic page, we also need to export getStaticPaths (would not have to do this if we were using getServerSideProps, only if using getStaticProps on dynamic page)\n// export async function getStaticPaths() {\n//   const client = await MongoClient.connect('mongodb+srv://jameshudson0357:X3O56tkC0LyjxGLH@cluster0.rduh66w.mongodb.net/meetups?retryWrites=true&w=majority')\n//   const db = client.db()\n//   const meetupsCollection = db.collection('meetups')\n//   // find all documents in meetupsCollection (first argument), but each documnet object will only contain the _id\n//   const meetups = await meetupsCollection.find({}, {_id: 1}).toArray()\n//   client.close()\n//   return {\n//     // fallback key tells NextJS whether your paths array contains all supported parameter values or just some of them (false = all, true = not all paths are pre-generated so if user goes to one (i.e. m4), then the server will pre-generate the missing ones dynamically when requests for them are coming in)\n//     fallback: false,\n//     paths: meetups.map(meetup => ({\n//       params: { meetupId: meetup._id.toString() },\n//     }))\n//   }\n// }\n// export async function getStaticProps(context) {\n//   // fetch data for a single meetup\n//   const meetupId = context.params\n//   console.log('HIIIII', meetupId.meetupId)\n//   const client = await MongoClient.connect('mongodb+srv://jameshudson0357:X3O56tkC0LyjxGLH@cluster0.rduh66w.mongodb.net/meetups?retryWrites=true&w=majority')\n//   const db = client.db()\n//   const meetupsCollection = db.collection('meetups')\n//   // get a single meetup's data\n//   // pass in some data to filter for that specific meetup (meetupId pulled from params)\n//   const selectedMeetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) })\n//   // console.log('bye', meetupsCollection)\n//   // console.log('hi', selectedMeetup)\n//   client.close()\n//   return {\n//     props: {\n//       meetupData: {\n//         id: selectedMeetup._id.toString(),\n//         title: selectedMeetup.title,\n//         address: selectedMeetup.address,\n//         image: selectedMeetup.image,\n//         description: selectedMeetup.description,\n//       },\n//     },\n//   }\n// }\n// export default MeetupDetailsPage\nimport { Fragment } from 'react';\nimport Head from 'next/head';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/jameshudson/code/udemy/react/section-23-nextjs-meetups-project/pages/[meetupId]/index.jsx"],"names":["Fragment","Head","MeetupDetail","MeetupDetails","props","meetupData","title","description","image","address"],"mappings":";;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAQA,KAAK,CAACC,UAAN,CAAiBC;AAAzB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBE;AAAnD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBG,KAD1B;AAEE,MAAA,KAAK,EAAEJ,KAAK,CAACC,UAAN,CAAiBC,KAF1B;AAGE,MAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBI,OAH5B;AAIE,MAAA,WAAW,EAAEL,KAAK,CAACC,UAAN,CAAiBE;AAJhC;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;KAfQJ,a;;AAoET,eAAeA,aAAf","sourcesContent":["// import Head from 'next/head'\n// import { MongoClient, ObjectId } from 'mongodb'\n\n// import MeetupDetail from \"../../components/meetups/MeetupDetail\"\n\n// const MeetupDetailsPage = (props) => {\n//   return (\n//     <>\n//       <Head>\n//         <title>{props.meetupData.title}</title>\n//         <meta name='description' content={props.meetupData.description}/>\n//       </Head>\n//       <MeetupDetail \n//         image={props.meetupData.image}\n//         title={props.meetupData.title}\n//         address={props.meetupData.address}\n//         description={props.meetupData.description}\n//       />\n//     </>\n//   )\n// }\n\n// // because this a dynamic page, we also need to export getStaticPaths (would not have to do this if we were using getServerSideProps, only if using getStaticProps on dynamic page)\n// export async function getStaticPaths() {\n//   const client = await MongoClient.connect('mongodb+srv://jameshudson0357:X3O56tkC0LyjxGLH@cluster0.rduh66w.mongodb.net/meetups?retryWrites=true&w=majority')\n//   const db = client.db()\n//   const meetupsCollection = db.collection('meetups')\n\n//   // find all documents in meetupsCollection (first argument), but each documnet object will only contain the _id\n//   const meetups = await meetupsCollection.find({}, {_id: 1}).toArray()\n\n//   client.close()\n  \n//   return {\n//     // fallback key tells NextJS whether your paths array contains all supported parameter values or just some of them (false = all, true = not all paths are pre-generated so if user goes to one (i.e. m4), then the server will pre-generate the missing ones dynamically when requests for them are coming in)\n//     fallback: false,\n//     paths: meetups.map(meetup => ({\n//       params: { meetupId: meetup._id.toString() },\n//     }))\n//   }\n// }\n\n// export async function getStaticProps(context) {\n//   // fetch data for a single meetup\n  \n//   const meetupId = context.params\n//   console.log('HIIIII', meetupId.meetupId)\n\n//   const client = await MongoClient.connect('mongodb+srv://jameshudson0357:X3O56tkC0LyjxGLH@cluster0.rduh66w.mongodb.net/meetups?retryWrites=true&w=majority')\n//   const db = client.db()\n//   const meetupsCollection = db.collection('meetups')\n\n//   // get a single meetup's data\n//   // pass in some data to filter for that specific meetup (meetupId pulled from params)\n//   const selectedMeetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) })\n\n//   // console.log('bye', meetupsCollection)\n//   // console.log('hi', selectedMeetup)\n\n//   client.close()\n\n//   return {\n//     props: {\n//       meetupData: {\n//         id: selectedMeetup._id.toString(),\n//         title: selectedMeetup.title,\n//         address: selectedMeetup.address,\n//         image: selectedMeetup.image,\n//         description: selectedMeetup.description,\n//       },\n//     },\n//   }\n// }\n\n// export default MeetupDetailsPage\n\nimport { MongoClient, ObjectId } from 'mongodb';\nimport { Fragment } from 'react';\nimport Head from 'next/head';\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return (\n    <Fragment>\n      <Head>\n        <title>{props.meetupData.title}</title>\n        <meta name='description' content={props.meetupData.description} />\n      </Head>\n      <MeetupDetail\n        image={props.meetupData.image}\n        title={props.meetupData.title}\n        address={props.meetupData.address}\n        description={props.meetupData.description}\n      />\n    </Fragment>\n  );\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    'mongodb+srv://jameshudson0357:X3O56tkC0LyjxGLH@cluster0.rduh66w.mongodb.net/meetups?retryWrites=true&w=majority'\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: 'blocking',\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(\n    'mongodb+srv://jameshudson0357:X3O56tkC0LyjxGLH@cluster0.rduh66w.mongodb.net/meetups?retryWrites=true&w=majority'\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId),\n  });\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description,\n      },\n    },\n  };\n}\n\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}