{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jameshudson/code/udemy/react/section-23-nextjs-meetups-project/pages/[meetupId]/index.jsx\";\nimport Head from 'next/head';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetailsPage = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // because this a dynamic page, we also need to export getStaticPaths (would not have to do this if we were using getServerSideProps, only if using getStaticProps on dynamic page)\n\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://jameshudson0357:X3O56tkC0LyjxGLH@cluster0.rduh66w.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups'); // find all documents in meetupsCollection (first argument), but each documnet object will only contain the _id\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    // fallback key tells NextJS whether your paths array contains all supported parameter values or just some of them (false = all, true = not all paths are pre-generated so if user goes to one (i.e. m4), then the server will pre-generate the missing ones dynamically when requests for them are coming in)\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const meetupId = context.params;\n  console.log('HIIIII', meetupId.meetupId);\n  const client = await MongoClient.connect('mongodb+srv://jameshudson0357:X3O56tkC0LyjxGLH@cluster0.rduh66w.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups'); // get a single meetup's data\n  // pass in some data to filter for that specific meetup (meetupId pulled from params)\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: new ObjectId(meetupId.me)\n  }); // console.log('bye', meetupsCollection)\n  // console.log('hi', selectedMeetup)\n\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetailsPage;","map":{"version":3,"sources":["/Users/jameshudson/code/udemy/react/section-23-nextjs-meetups-project/pages/[meetupId]/index.jsx"],"names":["Head","MongoClient","ObjectId","MeetupDetail","MeetupDetailsPage","props","meetupData","title","description","image","address","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","console","log","selectedMeetup","findOne","me","id"],"mappings":"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","sourcesContent":["import Head from 'next/head'\nimport { MongoClient, ObjectId } from 'mongodb'\n\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\"\n\nconst MeetupDetailsPage = (props) => {\n  return (\n    <>\n      <Head>\n        <title>{props.meetupData.title}</title>\n        <meta name='description' content={props.meetupData.description}/>\n      </Head>\n      <MeetupDetail \n        image={props.meetupData.image}\n        title={props.meetupData.title}\n        address={props.meetupData.address}\n        description={props.meetupData.description}\n      />\n    </>\n  )\n}\n\n// because this a dynamic page, we also need to export getStaticPaths (would not have to do this if we were using getServerSideProps, only if using getStaticProps on dynamic page)\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://jameshudson0357:X3O56tkC0LyjxGLH@cluster0.rduh66w.mongodb.net/meetups?retryWrites=true&w=majority')\n  const db = client.db()\n  const meetupsCollection = db.collection('meetups')\n\n  // find all documents in meetupsCollection (first argument), but each documnet object will only contain the _id\n  const meetups = await meetupsCollection.find({}, {_id: 1}).toArray()\n\n  client.close()\n  \n  return {\n    // fallback key tells NextJS whether your paths array contains all supported parameter values or just some of them (false = all, true = not all paths are pre-generated so if user goes to one (i.e. m4), then the server will pre-generate the missing ones dynamically when requests for them are coming in)\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: { meetupId: meetup._id.toString() },\n    }))\n  }\n}\n\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  \n  const meetupId = context.params\n  console.log('HIIIII', meetupId.meetupId)\n\n  const client = await MongoClient.connect('mongodb+srv://jameshudson0357:X3O56tkC0LyjxGLH@cluster0.rduh66w.mongodb.net/meetups?retryWrites=true&w=majority')\n  const db = client.db()\n  const meetupsCollection = db.collection('meetups')\n\n  // get a single meetup's data\n  // pass in some data to filter for that specific meetup (meetupId pulled from params)\n  const selectedMeetup = await meetupsCollection.findOne({ _id: new ObjectId(meetupId.me) })\n\n  // console.log('bye', meetupsCollection)\n  // console.log('hi', selectedMeetup)\n\n  client.close()\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description,\n      },\n    },\n  }\n}\n\nexport default MeetupDetailsPage"]},"metadata":{},"sourceType":"module"}